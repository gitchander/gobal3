package bal3

import (
	"github.com/gitchander/gobal3/ternary"
)

//------------------------------------------------------------------------------

// Add table:

// +----+----+----+----+
// |    |  T |  0 |  1 |
// +----+----+----+----+
// |  T | T1 |  T |  0 |
// +----+----+----+----+
// |  0 |  T |  0 |  1 |
// +----+----+----+----+
// |  1 |  0 |  1 | 1T |
// +----+----+----+----+

//------------------------------------------------------------------------------

// Sub table:

// +----+----+----+----+
// |  - |  T |  0 |  1 |
// +----+----+----+----+
// |  T |  0 |  T | T1 |
// +----+----+----+----+
// |  0 |  1 |  0 |  T |
// +----+----+----+----+
// |  1 | 1T |  1 |  0 |
// +----+----+----+----+

//------------------------------------------------------------------------------

// Sum table:

// +---+---+---+---+
// |   | T | 0 | 1 |
// +---+---+---+---+
// | T | 1 | T | 0 |
// +---+---+---+---+
// | 0 | T | 0 | 1 |
// +---+---+---+---+
// | 1 | 0 | 1 | T |
// +---+---+---+---+

func addSum(a, b int) int {
	c := a + b
	if c < -1 {
		c += 3
	}
	if c > 1 {
		c -= 3
	}
	return c
}

//------------------------------------------------------------------------------

// Consider table:

// +---+---+---+---+
// |   | T | 0 | 1 |
// +---+---+---+---+
// | T | T | 0 | 0 |
// +---+---+---+---+
// | 0 | 0 | 0 | 0 |
// +---+---+---+---+
// | 1 | 0 | 0 | 1 |
// +---+---+---+---+

func addCons(a, b int) int {
	if v := -1; (a == v) && (b == v) {
		return v
	}
	if v := 1; (a == v) && (b == v) {
		return v
	}
	return 0
}

//------------------------------------------------------------------------------

// A balanced ternary half adder

// c - carryOut

func halfAdder(a, b int) (s, c int) {
	s = addSum(a, b)
	c = addCons(a, b)
	return
}

//------------------------------------------------------------------------------

// Balanced Full Adder

// c0 - carryIn
// c1 - carryOut

func fullAdder(a, b int, c0 int) (s, c1 int) {
	var (
		s1, x1 = halfAdder(a, b)
		s2, x2 = halfAdder(s1, c0)
		s3     = addSum(x1, x2)
	)
	s = s2
	c1 = s3
	return
}

//------------------------------------------------------------------------------

var (
	//tritsAdd = fullAdder
	tritsAdd = ternary.FullAdder
)

func tritsSub(a, b int, c0 int) (s, c1 int) {
	b = ternary.Neg(b)
	return tritsAdd(a, b, c0)
}

//------------------------------------------------------------------------------
